---
- name: 'Ensure base extra repos'
  ansible.builtin.yum_repository:
    name: "{{ repo['name'] }}"
    description: "{{ repo['description'] }}"
    baseurl: "{{ repo['url'] }}"
    gpgkey: "{{ repo['gpgkey'] }}"
  loop:
    - name: 'vscodium'
      description: 'VSCodium'
      url: 'https://download.vscodium.com/rpms/'
      gpgkey: 'https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/-/raw/master/pub.gpg'
  loop_control:
    loop_var: 'repo'
  when: workstation_manage_repos

- name: 'Ensure packages are absent we dont want'
  ansible.builtin.dnf:
    name: 'nano*'
    state: 'absent'

- name: 'Ensure GNOME Desktop Environment'
  ansible.builtin.dnf:
    name:
      - '@Fonts'
      - '@GNOME'
      - 'redshift-gtk'
      - 'slick-greeter'
      - 'synapse'
      - 'terminator'
      - 'workrave-xfce'
    exclude:
      - 'NetworkManager-fortisslvpn-gnome'
      - 'NetworkManager-iodine-gnome'
      - 'NetworkManager-l2tp-gnome'
      - 'NetworkManager-libreswan-gnome'
      - 'NetworkManager-openconnect-gnome'
      - 'NetworkManager-openvpn-gnome'
      - 'NetworkManager-pptp-gnome'
      - 'NetworkManager-ssh-gnome'
      - 'NetworkManager-sstp-gnome'
      - 'NetworkManager-strongswan-gnome'
      - 'NetworkManager-vpnc-gnome'
      - 'nano-default-editor'
      - 'dnfdragora-updater'
      - 'gnome-terminal'
  when: workstation_desktop == 'gnome'

- name: 'Ensure Xfce Desktop Environment'
  ansible.builtin.dnf:
    name:
      - '@Fonts'
      - '@Xfce'
      - 'menulibre'
      - 'redshift-gtk'
      - 'slick-greeter'
      - 'synapse'
      - 'terminator'
      - 'workrave-xfce'
    exclude:
      - 'NetworkManager-fortisslvpn-gnome'
      - 'NetworkManager-iodine-gnome'
      - 'NetworkManager-l2tp-gnome'
      - 'NetworkManager-libreswan-gnome'
      - 'NetworkManager-openconnect-gnome'
      - 'NetworkManager-openvpn-gnome'
      - 'NetworkManager-pptp-gnome'
      - 'NetworkManager-ssh-gnome'
      - 'NetworkManager-sstp-gnome'
      - 'NetworkManager-strongswan-gnome'
      - 'NetworkManager-vpnc-gnome'
      - 'nano-default-editor'
      - 'dnfdragora-updater'
      - 'xfce4-terminal'
  when: workstation_desktop == 'xfce'

- name: 'Ensure Sway Desktop environment'
  ansible.builtin.dnf:
    name:
      - '@base-graphical'
      - '@Common NetworkManager Submodules'
      - '@Core'
      - '@Fonts'
      - '@Hardware Support'
      - '@Multimedia'
      - '@Sway Window Manager'
      - '@Sway Window Manager (supplemental packages)'
      - 'cronie'
      - 'alacritty'
      - 'power-profiles-daemon'
      - 'wlogout'
      - 'xfce4-settings'
    exclude:
      - 'NetworkManager-fortisslvpn-gnome'
      - 'NetworkManager-iodine-gnome'
      - 'NetworkManager-l2tp-gnome'
      - 'NetworkManager-libreswan-gnome'
      - 'NetworkManager-openconnect-gnome'
      - 'NetworkManager-openvpn-gnome'
      - 'NetworkManager-pptp-gnome'
      - 'NetworkManager-ssh-gnome'
      - 'NetworkManager-sstp-gnome'
      - 'NetworkManager-strongswan-gnome'
      - 'NetworkManager-vpnc-gnome'
      - 'nano-default-editor'
  when: workstation_desktop == 'sway'

- name: 'Ensure base packages'
  ansible.builtin.dnf:
    name:
      - 'bash-completion'
      - 'cockpit'
      - 'codium'
      - 'dos2unix'
      - 'evince'
      - 'file-roller'
      - 'flatpak'
      - 'gedit'
      - 'git'
      - 'gnome-calculator'
      - 'kernel-tools'
      - 'libreoffice-calc'
      - 'libreoffice-writer'
      - 'NetworkManager-tui'
      - 'nextcloud-client'
      - 'plocate'
      - 'picocom'
      - 'pwgen'
      - 'ristretto'
      - 'rsync'
      - 'seahorse'
      - 'selinux-policy-doc'
      - 'vim-default-editor'
      - 'vlc'
      - 'wget'
      - 'zenity'
    state: 'present'

- name: 'Ensure Fedora flatpak remote'
  community.general.flatpak_remote:
    name: 'fedora'
    state: 'present'
    flatpakrepo_url: 'oci+https://registry.fedoraproject.org'

- name: 'Ensure flakhub remote'
  community.general.flatpak_remote:
    name: 'flathub'
    state: 'present'
    flatpakrepo_url: 'https://dl.flathub.org/repo/flathub.flatpakrepo'

- name: 'Ensure flatpak wrapper'
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # This file is managed by Ansible, YOUR CHANGES WILL BE LOST!
      # This script works around an issue that flatpak requires a D-BUS session to work
      /usr/bin/dbus-run-session /usr/bin/flatpak $@
    dest: '/usr/bin/flatpak-wrapper'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: 'Ensure flatpaks from Fedora'
  community.general.flatpak:
    name:
      - 'com.github.tchx84.Flatseal'
      - 'org.mozilla.Thunderbird'
      - 'org.zealdocs.zeal'
    remote: 'fedora'
    method: 'system'
    executable: '/usr/bin/flatpak-wrapper'

- name: 'Ensure flatpaks from Flathub'
  community.general.flatpak:
    name:
      - 'com.bitwarden.desktop'
      - 'com.discordapp.Discord'
      - 'com.jgraph.drawio.desktop'
      - 'com.spotify.Client'
      - 'im.riot.Riot'
      - 'org.mozilla.firefox'
      - 'org.signal.Signal'
    remote: 'flathub'
    method: 'system'
    executable: '/usr/bin/flatpak-wrapper'

- name: 'Ensure services'
  ansible.builtin.service:
    name: "{{ service }}"
    state: 'started'
    enabled: true
  loop:
    - 'cockpit.socket'
  loop_control:
    loop_var: 'service'

- name: 'Ensure VM capability'
  when: workstation_hypervisor
  block:
    - name: 'Ensure packages'
      ansible.builtin.dnf:
        name:
          - 'cockpit-machines'
          - 'cockpit-podman'
        state: 'present'

- name: 'Ensure graphical boot'
  when: not workstation_headless
  notify: 'Reboot system'
  block:
    - name: 'Ensure graphical boot target'
      ansible.builtin.file:
        src: '/usr/lib/systemd/system/graphical.target'
        dest: '/etc/systemd/system/default.target'
        state: 'link'

    - name: 'Get Plymouth theme'
      ansible.builtin.command: plymouth-set-default-theme
      register: 'workstation_current_plymouth'
      changed_when: false

    - name: 'Ensure Plymouth theme'
      ansible.builtin.command: plymouth-set-default-theme spinner -R
      when: workstation_current_plymouth['stdout'] != 'spinner'
      changed_when: true

    - name: 'Configure SDDM'
      ansible.builtin.template:
        src: "{{ file['template'] }}"
        dest: "{{ file['dest'] }}"
        owner: 'root'
        group: 'root'
        mode: '0644'
      loop:
        - template: 'sddm-hide-users.conf.j2'
          dest: '/etc/sddm.conf.d/hide-users.conf'
      loop_control:
        loop_var: 'file'
      when: workstation_desktop == 'sway'

    - name: 'Configure LightDM'
      ansible.builtin.template:
        src: "{{ file['template'] }}"
        dest: "{{ file['dest'] }}"
        owner: 'root'
        group: 'root'
        mode: '0644'
      loop:
        - template: 'lightdm-slick-greeter.conf.j2'
          dest: '/etc/lightdm/slick-greeter.conf'
        - template: 'lightdm.conf.j2'
          dest: '/etc/lightdm/lightdm.conf'
      loop_control:
        loop_var: 'file'
      when: workstation_desktop == 'xfce'

- name: 'Ensure polkit is configured to allow users to manage Bluetooth radios'
  ansible.builtin.copy:
    src: '99-blueman.rules'
    dest: '/etc/polkit-1/rules.d/99-blueman.rules'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: 'Schedule updatedb'
  ansible.builtin.cron:
    name: 'Update plocate DB'
    job: '/usr/bin/updatedb'
    user: 'root'
    special_time: 'hourly'

- name: 'Ensure udev rules for power-profiles-daemon'
  ansible.builtin.copy:
    content: |
      # Switch to performance profile when plugged in
      ACTION=="change", SUBSYSTEM=="power_supply", ATTR{online}=="1", RUN+="/usr/bin/powerprofilesctl set performance"
      # Switch to power-saver when on battery
      ACTION=="change", SUBSYSTEM=="power_supply", ATTR{online}=="0", RUN+="/usr/bin/powerprofilesctl set power-saver"
    dest: '/etc/udev/rules.d/99-power-profile.rules'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: workstation_desktop == 'sway'
